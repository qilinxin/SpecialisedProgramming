Course: COMP SCI 7007 – Specialised Programming, Semester 1/2025.         

Name: Linxin Qi
ID: a1915674
Practice problem/Exam and number:

Week:	6



*******************
* Description  * 
*******************


1. List the problems you attempted, and Java API Classes and methods you used to solve each problem.

[Eg. SlowKeyBoard: ArrayList (size, add, get), Arrays.sort]

Problem1: UnsealTheSafe
java.util.Arrays（fill）

Problem2: RGBStreet
java.util.Arrays（fill）、java.lang.Math(min) 、Integer.parseInt

Problem3: MatchNumbersEasy
java.lang.StringBuilder

Problem4: ForestGarbage
java.util.PriorityQueue
java.util.Arrays（fill）、Custom Node class (r,c,garbage,near)

*******************
* Challenges  * 
*******************
2. What challenges have you faced to solve the given problems?
Problem1: UnsealTheSafe
The keyboard image needs to be converted into something that the code can understand before analysis
I roughly know that I need to use the concept of dp to get the optimal result at each step, but I don’t know how to define it.
To initialize the data, need to define the data structure

Problem2: RGBStreet
The challenge for me is to convert the content described in the question into a distribution problem in the form of DP

Problem3: MatchNumbersEasy
The first challenge is to define the dp format
Secondly, the obtained result must be converted into a number, and it must be the largest number.
The third is to consider whether all the matches need to be used up, because the examples given are all used up.

Problem4: ForestGarbage
I can't convert the requirements into the corresponding model

************************
* Solution Approach  *
************************

3. Discuss how you approach the problem and how you solve the problem.
question1:
Because only up, down, left, and right movement is allowed, I abstracted this layout into an adjacency list called ADJACENT: ADJACENT[d] stores all the numbers that can be reached in one step from number d. Translating images into code
If the password is greater than 1, the number of the end digit - 1 is only related to the end digit, so  can find the relationship between n and n-1 and turn it into dp
Finally, it is a loop process, paying attention to data boundaries, using test results to fix code defects, etc.

question2:
Now convert the input data into the list structure that I am more accustomed to processing
Initialize the cost of each color
Because the colors cannot be the same, the cost of the last color is related to the cost of the first two different colors. Write the formula
Final test and verification

question3:
The final answer to this question is that we don’t need to use up all the matches from the test case, so the idea is to first find a non-zero number, and then use the cheapest number to fill the longest possible number of digits.
Then start from the top and use the remaining matches to make the numbers as big as possible, gradually moving to the bottom.

question4:
I didn't quite understand this problem, and chatgpt helped me solve it. It's a two-level shortest path problem:
First, minimize the number of garbage squares ('g') passed through on the path.
If the 1s are the same, then minimize the number of "neighboring garbage" squares passed through on the path (reaching a '.' with at least one of its four neighbors being a 'g').
Use Dijkstra to perform a lexicographical comparison of the cost pairs (garbageCnt, nearCnt).

4. What did you learn from the problem? How this problem type of problems will help you to be a better problem solver?
From this experience, I learned to develop better modeling skills, such as converting "image/text rules → computable structures."
For example, I mapped the keyboard to an adjacency list, converted street paint into a row-column cost matrix, and converted a forest grid into a graph.
I gained a general understanding of the operational logic and design of DP, and used concise DP states to express constraints—UnsealTheSafe used "last digit layered counting" and RGBStreet used "minimum cost of the previous building of a different color"

5. Which area you focused on improving (eg. speed, fluency, algorithmic design, coding)?
Algorithmic design, the algorithm is very clever. Many of these problems are still close to real life. For example, the house coloring problem will be applied on the map. I hope I can learn more about it.

6. What are your goals for the next practice problems?
Compared with last week, the number of questions I can do this week has increased significantly, but I still can't finish them all. Next week, after completing another major assignment for another course, I will put more effort into algorithm practice.

7. Have you used any AI tool such as ChatGPT? How have you used it and explain this tool is helping you to be a better problem solver?
For the third question, I asked AI to give a solution when I used the DP method at the beginning, but I didn’t need to use up all the left and right matches in the end, so the solution was the same as my initial solution.
I basically completed the fourth question with the help of AI.
I think on my own first, and then use it to verify high-level ideas such as modeling and state transfer. During the practice, I ask it to construct counterexamples and boundary tests, and compare different solutions
(such as DP/greedy/shortest path), helping me quickly locate bugs and make trade-offs.




